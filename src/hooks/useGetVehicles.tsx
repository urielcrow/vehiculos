import React,{useContext}  from 'react';
import { VehicleContext } from '../context/VehicleContext';
import { fetchCustome } from '../helpers/fetch';  
import {Pager,generateLimit} from '../components/pager/Pager';

// Generated by https://quicktype.io

export interface TopLevel {
    status: string;
    result: Result;
}

export interface Result {
    code: string;
    msg:  Msg;
}

export interface Msg {
    vehiculos_existentes: string;
    vehiculos_por_pagina: Vehiculo[];
}

export interface Vehiculo {
    id:            string;
    brand:         string;
    model:         string;
    serie:         string;
    plates:        null | string;
    engine_number: null | string;
    image:         string;
}

interface Params{
    totalPerPage : number,
    pageInit:number,
    filterSearch:string
}

export const useGetVehicles = ({totalPerPage,pageInit,filterSearch}:Params)=>{

    //#region PAginador
   
    const totalPerPage_ = totalPerPage;
    const pageInit_ = pageInit;

    //Generemos nuestro limite de manera calculada por si queremos iniciar en una pagina distinta a la 1
    const limit = [generateLimit(pageInit_,totalPerPage_),totalPerPage_];

    //Controlamos los cambios en el limit procenientes del paginador, y controlamos el total de registros que vengan de la API
    const [page,setPage] = React.useState({
        limit,
        totalRegistros : 0,
        current : pageInit_
    });

     //Funcion en la que esperamos respuesta del paginador
    const pagina = (pag:any)=>{

        setVehicles({
            ...vehicles,
            load:true
        });
        
        //establecemos el nuevo limit en la petici칩n y actualizamos la pagina actual en caso de que queramos sincronizar m치s de 1 paginador
        setPage(state => state ={
            ...state,
            limit : pag.limit,
            current : pag.pag
        });

    }


    const Paginador = ()=>{
        return <Pager pagina={pagina} totalRegistrosPorPagina={totalPerPage_} totalRegistros={page.totalRegistros} paginaActual={page.current}/>
    }

    //#endregion Paginador

    //#region Buscador

    const fieldsFilters = {
        search : filterSearch
    };

    //campos de busqueda para controlar las entrads del usuario
    const [filters, setFilters] = React.useState(fieldsFilters);
    // //Es una copia para ejecutar la busqueda una vez que el debonce se ejecuta
    const [filtersDelay, setFiltersDelay] = React.useState(fieldsFilters);

    const debonceRef = React.useRef<NodeJS.Timeout>();
    
    const filterChange = (e : any)=>{

        if(debonceRef.current)
            clearTimeout(debonceRef.current);

        setFilters({
            ...filters,
            [e.target.name] : e.target.value
        });

        debonceRef.current = setTimeout(()=>{

            setFiltersDelay({
                ...filtersDelay,
                [e.target.name] : e.target.value
            });
    
            //Indicamos al usuario que estamos cargando los nuevos datos
            setVehicles(state => state={
                ...state,
                load : true
            });
    
             //establecemos el nuevo limit en la petici칩n y actualizamos la pagina actual en caso de que queramos sincronizar m치s de 1 paginador
            setPage(state => state ={
                ...state,
                limit : [0,totalPerPage_],
                current : 1
            });

        },1000);

    }
    
    //#endregion Buscador

    const [vehicles, setVehicles] = React.useState<{load:boolean,data:Msg}>({
        load:true,
        data : {
            vehiculos_existentes : "0",
            vehiculos_por_pagina : []
        }
    });

    const [reloadPager,setReloadPager] = React.useState(false);

    const responseServer = React.useCallback(async()=>{

        const {result} : TopLevel = await fetchCustome( { endpoint : `/vehicles?start=${page.limit[0]}&end=${page.limit[1]}&q=${filtersDelay.search}`, token : true } );

        setPage({
            ...page,
            totalRegistros: parseInt(result.msg.vehiculos_existentes)
        });

        console.log(result);

        setVehicles({
            data: result.msg,
            load:false
        });

    },[page.limit,filtersDelay.search,reloadPager]);// eslint-disable-line react-hooks/exhaustive-deps
    //con el comentario anterior elimino el WARNING filtersFetch.name, porque en el mismo sitio estoy actualizando page.limit y filtersFetch.name, lo que provaca que se llama 2 veces al fetch

    React.useEffect(()=>{
        responseServer();
    },[responseServer]);

    return {
        vehicles,
        Paginador,
        filterChange,
        filters,
        page,
        setReloadPager
    }

}